name: parsec intergration

on:
  workflow_call:
    outputs:
      build_matrix_0:
        description: build order 0, build tasks
        value: ${{ jobs.parsec_intergration.outputs.build_matrix_0 }}
      build_matrix_1:
        description: build order 1, build tasks
        value: ${{ jobs.parsec_intergration.outputs.build_matrix_1 }}
      build_matrix_2:
        description: build order 2, build tasks
        value: ${{ jobs.parsec_intergration.outputs.build_matrix_2 }}
      build_matrix_3:
        description: build order 3, build tasks
        value: ${{ jobs.parsec_intergration.outputs.build_matrix_3 }}
      build_matrix_4:
        description: build order 4, build tasks
        value: ${{ jobs.parsec_intergration.outputs.build_matrix_4 }}
      build_matrix_5:
        description: build order 5, build tasks
        value: ${{ jobs.parsec_intergration.outputs.build_matrix_5 }}
      build_matrix_6:
        description: build order 6, build tasks
        value: ${{ jobs.parsec_intergration.outputs.build_matrix_6 }}
      build_matrix_7:
        description: build order 7, build tasks
        value: ${{ jobs.parsec_intergration.outputs.build_matrix_7 }}
      build_matrix_8:
        description: build order 8, build tasks
        value: ${{ jobs.parsec_intergration.outputs.build_matrix_8 }}
      build_matrix_9:
        description: build order 9, build tasks
        value: ${{ jobs.parsec_intergration.outputs.build_matrix_9 }}
      all_build_task:
        description: all build tasks used for
        value: ${{ jobs.parsec_intergration.outputs.all_build_task }}
      deploy:
        description: deploy way AUTO or MANUALLY
        value: ${{ jobs.parsec_intergration.outputs.deploy }}
      intergration_message:
        description: intergration message at intergration.yml
        value: ${{ jobs.parsec_intergration.outputs.intergration_message }}
      component:
        description: intergration repos component
        value: ${{ jobs.parsec_intergration.outputs.component }}

jobs:
  parsec_intergration:
    name: parsec intergration
    runs-on: ubuntu-latest
    outputs:
      build_matrix_0: ${{ steps.parsec_intergration.outputs.build_matrix_0 }}
      build_matrix_1: ${{ steps.parsec_intergration.outputs.build_matrix_1 }}
      build_matrix_2: ${{ steps.parsec_intergration.outputs.build_matrix_2 }}
      build_matrix_3: ${{ steps.parsec_intergration.outputs.build_matrix_3 }}
      build_matrix_4: ${{ steps.parsec_intergration.outputs.build_matrix_4 }}
      build_matrix_5: ${{ steps.parsec_intergration.outputs.build_matrix_5 }}
      build_matrix_6: ${{ steps.parsec_intergration.outputs.build_matrix_6 }}
      build_matrix_7: ${{ steps.parsec_intergration.outputs.build_matrix_7 }}
      build_matrix_8: ${{ steps.parsec_intergration.outputs.build_matrix_8 }}
      build_matrix_9: ${{ steps.parsec_intergration.outputs.build_matrix_9 }}
      all_build_task: ${{ steps.parsec_intergration.outputs.all_build_task }}
      deploy: ${{ steps.illegal_repo_tags.outputs.DEPLOY }}
      intergration_message: ${{ steps.parsec_intergration.outputs.intergration_message }}
      component: ${{ steps.parsec_intergration.outputs.component }}

    steps:
      - name: checkout_pull_request
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          persist-credentials: false

      - name: parsec_intergration
        id: parsec_intergration
        shell: python
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          import requests
          import yaml
          import os
          import logging

          maxSize = os.environ.get("MAX_TASKS", 10)
          illegalTags = []
          illegalRepos = []

          permissions = None
          with open("permissions.yml") as permissions_file:
              permissions = yaml.load(permissions_file, Loader=yaml.BaseLoader)
          not_allowed_repo = permissions.get("noauto")

          header = {
              "Accept": "application/vnd.github+json",
              "Authorization":"Bearer " + os.environ.get("GITHUB_TOKEN")
          }

          def read_intergration():
              with open("intergration.yml", "r+") as intergration_file:
                  return yaml.load(intergration_file, Loader=yaml.BaseLoader)

          def check_tag_exsist(repo, tag):
              res = requests.get("https://api.github.com/repos/{repo}/git/ref/tags/{tag}".format(repo=repo, tag=tag), headers=header)
              if res.status_code != 200:
                  illegalTags.append({"repo": repo, "tag": tag})
              if repo in not_allowed_repo:
                  illegalRepos.append(repo)
          
          def set_output(name, value):
              output_file = os.environ.get("GITHUB_OUTPUT")
              with open(output_file, "a") as output:
                  output.write(name + "=" + value + "\n")

          try:
              allBuildTasks = [{"order": j,"data":{"payload": []}} for j in range(maxSize)]
              data = read_intergration()

              message = data.get("message", "")
              set_output("intergration_message", message)
              with open("intergration-${{ github.event.number }}-detail.md", "w+") as intergration_detail:
                  intergration_detail.write(message)

              for repo in data.get("repos"):
                  order = int(repo.get("order",0))
                  order = max(0, order) and min(order , maxSize - 1)
                  tagsha = repo.get('tagsha')
                  tag = repo.get('tag')
                  if tag and tag != "" and len(tag) > 0:
                    check_tag_exsist(repo.get('repo'), repo.get('tag'))
                  if tagsha == "" and len(tagsha) <= 0 and tagsha == "" and len(tagsha) <= 0:
                    illegalTags.append({"repo": repo, "tag": tag, "tagsha": tagsha})
                  allBuildTasks[order].get("data").get("payload").append(repo)

              if len(illegalTags) > 0:
                  set_output("illegal_tags", str(illegalTags))
              else:
                  set_output("illegal_tags", "undefined")

              if len(illegalRepos) > 0:
                  set_output("illegal_repos", str(illegalRepos))
              else:
                  set_output("illegal_repos", "undefined")

              allRepos = []
              for order in allBuildTasks:
                  for repo in order.get("data").get("payload"):
                      allRepos.append(repo)
                  if len(order.get("data").get("payload")) > 0:
                      set_output("build_matrix_" + str(order['order']), str(order.get("data")))
              set_output("all_build_task", str(allRepos))

          except BaseException as e:
              logging.error(e)
              exit(-10)

      - name: illegal_repo_tags
        id: illegal_repo_tags
        uses: actions/github-script@v6
        with:
          github-token: ${{ github.token }}
          script: |
            const BOT_NAME = "RepoTagCheck Bot"
            const COMMENT_HEAD = "**" + BOT_NAME + "**\n\n"
            illegal_tags = ${{ steps.parsec_intergration.outputs.illegal_tags }}
            illegal_repos = ${{ steps.parsec_intergration.outputs.illegal_repos }}
            let COMMENT_BODY = ""
            if ( illegal_tags !== undefined || illegal_repos !== undefined ) {
              if ( illegal_tags !== undefined ) {
                  COMMENT_BODY += "Check failed!\nListed repo and tag pairs are not exists: \n|repo|tag|\n|-|-|\n"
                  illegal_tags.forEach(tag => {
                    COMMENT_BODY += "|" + tag["repo"] + "|" + tag["tag"] + "|\n"
                  })
                  COMMENT_BODY += "\n"
              }

              if ( illegal_repos !== undefined ) {
                  COMMENT_BODY += "Listed repos are not allowed by automatic intergration: \n|repo|\n|-|\n"
                  illegal_repos.forEach(repo => {
                    COMMENT_BODY += "|" + repo + "|\n"
                  })
              }
            } else {
              COMMENT_BODY = "All repo and tag pairs check passed!"
            }

            if ( context.issue.number != undefined ) {
              const response = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number
              })
              const reg = new RegExp("\\*+" + BOT_NAME + "\\*+")
              tagBotComment= response.data.find(comment => comment.body.match(reg))
              if (tagBotComment) {
                await github.rest.issues.updateComment({
                    comment_id: tagBotComment.id,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: COMMENT_HEAD + COMMENT_BODY
                })
              } else {
                await github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: COMMENT_HEAD + COMMENT_BODY
                })
              }
            }

            core.setOutput('DEPLOY', 'TestingIntegrationTesterReveiw')
            if ( illegal_tags !== undefined ) {
              core.setFailed("some tags are not invalid!")
            }

            // component 检查
            all_build_task = ${{ steps.parsec_intergration.outputs.all_build_task }}
            let component = ""
            for (repo of all_build_task) {
              console.log(repo)
              repoinfo = repo.repo.split('/')
              if (len(repoinfo) == 2) {
                const {data} = await github.rest.repos.getContent({
                  owner: repoinfo[0],
                  repo: repoinfo[1],
                  path: ".obs/workflows.yml",
                });
                datas = Buffer.from(data.content, data.encoding)
                obsinfo = datas.toString()
                if (len(obsinfo) > 0) {
                  if (obsinfo.includes("source_project: deepin:Develop:dde")) {
                    if (component == "") {
                      component = "dde"
                    }

                    if (component != "dde") {
                      core.setFailed("intergrate multi components repo are not allowed!")
                      break
                    }

                  } else if (obsinfo.includes("source_project: deepin:Develop:main")) {
                    if (component == "") {
                      component = "main"
                    }

                    if (component != "main") {
                      core.setFailed("intergrate multi components repo are not allowed!")
                      break
                    }

                  } else if (obsinfo.includes("source_project: deepin:Develop:community")) {
                    if (component == "") {
                      component = "community"
                    }

                    if (component != "community") {
                      core.setFailed("intergrate multi components repo are not allowed!")
                      break
                    }

                  } else if (obsinfo.includes("source_project: deepin:Develop:commercial")) {
                    if (component == "") {
                      component = "commercial"
                    }

                    if (component != "commercial") {
                      core.setFailed("intergrate multi components repo are not allowed!")
                      break
                    }
                  }
                } else {
                  // 默认没有配置obs工作流程的项目组件为community
                  if (component == "") {
                    component = "community"
                  }

                  if (component != "community") {
                    core.setFailed("intergrate multi components repo are not allowed!")
                    break
                  }
                }
              }

              if (component == "") {
                // 默认community
                component = "community"
              }

              core.setOutput('component', component)
            }

      - name: upload intergration detail
        uses: actions/upload-artifact@v2
        with:
          name: intergration-${{ github.event.number }}-detail.md
          path: intergration-${{ github.event.number }}-detail.md
