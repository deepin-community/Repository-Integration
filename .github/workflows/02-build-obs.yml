name: build on obs

on:
  workflow_call:
    inputs:
      repo:
        required: true
        type: string
      tag:
        type: string
      tagsha:
        type: string
      topic:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      repo:
        required: true
        type: string
      tag:
        type: string
      tagsha:
        type: string
      topic:
        required: true
        type: string

env:
  TOPIC: ${{ inputs.topic }}
  TAG: ${{ inputs.tag }}
  REPO: ${{ inputs.repo }}
  TAGSHA: ${{ inputs.tagsha }}
  GITHUB_TOKEN: ${{ github.token }}
  OSCPASS: ${{ secrets.OSCPASS }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      pkgname: ${{ steps.pkgname.outputs.pkgname }}
      tagsha: ${{ steps.tagsha.outputs.tagsha }}
    steps:
      - name: Print Environment
        run: export

      - name: Install tools
        run: |
          sudo apt-get update && sudo apt install -y osc curl

      - name: pkgname
        id: pkgname
        run: |
          echo "pkgname=$(echo ${{ inputs.repo }} |awk -F '/' '{print $2}')" >> $GITHUB_OUTPUT

      - name: obs integration topic project prepare
        run: |
          set +e
          set -x
          result=$(curl -u golf66:$OSCPASS "https://build.deepin.com/source/deepin:CI:TestingIntegration:$TOPIC/_meta"|grep "unknown_project")
          if [ "$result" != "" ];then
            curl -o meta.xml https://raw.githubusercontent.com/deepin-community/Repository-Integration/master/.github/workflows/obs-proj-meta.tpl
            sed -i "s#TOPIC#${TOPIC}#g" meta.xml
            curl -X PUT -u golf66:$OSCPASS -H "Content-type: text/xml" -d @meta.xml "https://build.deepin.com/source/deepin:CI:TestingIntegration:$TOPIC/_meta"
          fi

      - name: get tag info
        id: tagsha
        run: |
          set -x
          urlencode() {
            local LANG=C
            local length="${#1}"
            i=0
            while :
            do
            [ $length -gt $i ]&&{
            local c="${1:$i:1}"
            case $c in
            [a-zA-Z0-9.~_-]) printf "$c" ;;
            *) printf '%%%02X' "'$c" ;;
            esac
            }||break
            let i++
            done
          }
          RAWTAG=$(urlencode $TAG)
          echo "get tag $TAG information"
          if [ -z "$TAGSHA" -a "$TAGSHA" != "undefined" ]; then
            # get sha from repository git tag
            TAGSHA=$(curl -H "Accept: application/vnd.github+json" \
                    -H "Authorization: Bearer $GITHUB_TOKEN" -H "X-GitHub-Api-Version: 2022-11-28"  \
                    https://api.github.com/repos/$REPO/git/ref/tags/$RAWTAG |grep sha|awk -F "\"" '{print $4}')
            if [ -z "$TAGSHA" ]; then
              echo "tag invalid"
              exit 1
            fi
          fi
          echo "tagsha=$TAGSHA" >> $GITHUB_OUTPUT

      - name: Trigger build
        run: |
          set -x
          mkdir -p ~/.config/osc
          echo "${{ secrets.OSCRC }}" > ~/.config/osc/oscrc
          pkgname="${{ steps.pkgname.outputs.pkgname }}"
          TAGSHA="${{ steps.tagsha.outputs.tagsha}}"

          curl -o meta.xml https://raw.githubusercontent.com/deepin-community/Repository-Integration/master/.github/workflows/obs-pkg-meta.tpl
          sed -i "s#PKGNAME#${pkgname}#g" meta.xml
          sed -i "s#Testing:COMPONENT#CI:TestingIntegration:${TOPIC}#g" meta.xml
          curl -X PUT -u golf66:$OSCPASS -H "Content-type: text/xml" -d @meta.xml "https://build.deepin.com/source/deepin:CI:TestingIntegration:${TOPIC}/$pkgname/_meta"

          osc co deepin:CI:TestingIntegration:${TOPIC}/${pkgname} && cd $_
          needbuild=true
          if [ -f _branch_request ];then
            cat _branch_request |grep "${TAGSHA}" && needbuild=false ||echo true
          fi
          if [ ! -f _service ];then
            curl -o _service https://raw.githubusercontent.com/deepin-community/Repository-Integration/master/.github/workflows/obs-pkg.tpl && \
            sed -i "s#REPO#$REPO#g" _service && osc add _service && osc ci -m "init"
          fi
          if [ $needbuild = "true" ];then
            curl -o _branch_request https://raw.githubusercontent.com/deepin-community/Repository-Integration/master/.github/workflows/obs-br.tpl
            sed -i  "s#REPO#$REPO#g" _branch_request
            sed -i "s#TAGSHA#$TAGSHA#g" _branch_request
            osc add _branch_request && osc ci -m "update tag release: $TAGSHA"
          fi

  log:
    needs: build
    strategy:
      matrix:
        arch: [aarch64, x86_64]

    runs-on: ubuntu-latest
    env:
      ARCH: ${{ matrix.arch }}
    steps:
      - name: Install osc
        run: |
          sudo apt-get update && sudo apt install -y osc

      - name: build log tracker
        run: |
          set -x
          mkdir -p ~/.config/osc
          echo "${{ secrets.OSCRC }}" > ~/.config/osc/oscrc
          pkgname="${{ needs.build.outputs.pkgname }}"
          osc co deepin:CI:TestingIntegration:${TOPIC}/${pkgname} && cd $_
          if [ -z $(osc buildinfo testing ${ARCH} |grep "<error>excluded</error>") ];then osc buildlog testing ${ARCH}; else echo "${ARCH} build excluded"; fi
          if [ "$(osc api -X GET /build/deepin:CI:TestingIntegration:${TOPIC}/testing/${ARCH}/${pkgname}/_status |grep 'succeeded')" = "" -a "$(osc api -X GET /build/deepin:CI:TestingIntegration:${TOPIC}/testing/${ARCH}/${pkgname}/_status |grep 'finished')" = "" ];\
          then echo "${ARCH} build failed" && -1; else echo "${ARCH} build succeeded"; fi
