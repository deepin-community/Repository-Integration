name: deployed feedback

on:
  workflow_call:
    inputs:
      integrations:
        required: true
        type: string

jobs:
  deployed:
    name: feedback
    runs-on: ubuntu-latest
    steps:
      - name: install depends for load scripts
        run: |
          npm install @octokit/rest
          npm install @octokit/auth-app
          npm install js-yaml

      - name: Get token using github-script
        id: get-token
        uses: actions/github-script@v6
        env:
          APP_ID: ${{ secrets.APP_ID }}
          APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}
        with:
          script: |
            global["fetch"] = fetch
            const { Octokit } = require("@octokit/rest");
            const { createAppAuth } = require("@octokit/auth-app");
            const appOctokit = new Octokit({
              authStrategy: createAppAuth,
              auth: {
                appId: process.env.APP_ID,
                privateKey: process.env.APP_PRIVATE_KEY,
              }
            });
            const app_installation = await appOctokit.rest.apps.getRepoInstallation({
              owner: context.payload.organization.login,
              repo: context.payload.repository.name
            });
            const { token } = await appOctokit.auth({
              type: "installation",
              installationId: app_installation.data.id
            });
            core.setOutput('app_token', token)

      - name: update records
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.get-token.outputs.app_token }}
          script: |
            const yaml = require('js-yaml');
            const newIntergrated = ${{ inputs.integrations }}
            const {data} = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: "records.yml",
            });

            datas = Buffer.from(data.content, data.encoding)
            recordsContent = yaml.load(datas.toString())

            if ( recordsContent.records === null || recordsContent.records === undefined ) {
                recordsContent.records = {}
            }

            newIntergrated.forEach(repo => {
                recordsContent.records[repo.repo] = {"ver": repo.tag, "date": new Date().toISOString().split('T')[0], "pr": ${{ github.event.number }}}
            })

            const contentString = yaml.dump(recordsContent, {'sortKeys': true ,indent: 4})

            let contentBinary = Buffer.from(contentString).toString("base64")
            await github.rest.repos.createOrUpdateFileContents({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: data.sha,
                path: "records.yml",
                message: "update records from https://github.com/${{ github.repository }}/pull/${{ github.event.number }}",
                content: contentBinary,
                branch: "master",
            })

      - name: label intergerted
        uses: actions/github-script@v6
        with:
          github-token: ${{ github.token }}
          script: |
            const { data } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const labeled = (data.find(label => label.name === "Merged") !== undefined)

            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['Merged']
            })

      - name: close this pull request
        shell: python
        env:
          GITHUB_TOKEN: ${{ steps.get-token.outputs.app_token }}
        run: |
          import requests
          import os

          headers = {
              "Accept": "application/vnd.github+json",
              "Authorization":"Bearer " + os.environ.get("GITHUB_TOKEN")
          }
          res = requests.patch(url="https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.number }}",
            headers=headers, json= {'state': 'closed'})
