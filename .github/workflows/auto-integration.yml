name: integration-request

on: #[push]
  pull_request_target:
    paths:
      - "integration.yml"
    types: [ opened, synchronize ]

concurrency:
  group: ${{ github.workflow }}-pull/${{ github.event.number }}
  cancel-in-progress: true

env:
  TOPIC: test-integration-pr-${{ github.event.number }}
  OSCPASS: ${{ secrets.OSCPASS }}

jobs:
  parsec_intergration:
    uses: peeweep-test/Repository-Integration/.github/workflows/01-parsec-integration.yml@master

  ouput_message:
    name: output integration
    needs: parsec_intergration
    if: ${{ github.event.pull_request.head.sha }}
    uses: peeweep-test/Repository-Integration/.github/workflows/02-integration-output.yml@master

  build_project_prepare:
    name: build project prepare
    runs-on: ubuntu-latest
    outputs:
      issueid: ${{ steps.find-comments.outputs.issueid }}
      projectItemID: ${{ steps.find-comments.outputs.projectItemID }}
    steps:
      - name: obs integration topic project prepare
        run: |
          set +e
          set -x
          result=$(curl -u golf66:$OSCPASS "https://build.deepin.com/source/deepin:CI:TestingIntegration:$TOPIC/_meta"|grep "unknown_project")
          if [ "$result" != "" ];then
            curl -o meta.xml https://raw.githubusercontent.com/peeweep-test/Repository-Integration/master/.github/workflows/obs-proj-meta.tpl
            sed -i "s#TOPIC#${TOPIC}#g" meta.xml
            curl -X PUT -u golf66:$OSCPASS -H "Content-type: text/xml" -d @meta.xml "https://build.deepin.com/source/deepin:CI:TestingIntegration:$TOPIC/_meta"
          fi

      - name: find comments
        id: find-comments
        uses: actions/github-script@v6
        with:
          script: |
            let issueid = 'undefined'
            let projectItemID = 'undefined'
            const BOT_NAME = "IntegrationProjector Bot"
            const COMMENT_HEAD = "**" + BOT_NAME + "**\n"

            if ( context.issue.number != undefined ) {
              const response = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number
              })
              const reg = new RegExp("\\*+" + BOT_NAME + "\\*+")
              botComment= response.data.find(comment => comment.body.match(reg))

              if (botComment) {
                // get issue id
                comments = botComment.body.split("\n")
                core.debug(botComment)
                // console.log(comments.length)
                if (comments.length > 3) {
                  issueid = comments[2].replace("IssueID: ", "")
                  projectItemID = comments[3].replace("ProjectItemID: ", "")
                }
              }
            }
            console.log('issueid: ', issueid, 'projectItemID: ', projectItemID)
            core.setOutput('issueid', issueid)
            core.setOutput('projectItemID', projectItemID)

  create_issue_link_project:
    name: create issue and link project
    needs:
      - parsec_intergration
      - ouput_message
      - build_project_prepare
      - build-order-0
      - build-order-1
      - build-order-2
      - build-order-3
      - build-order-4
      - build-order-5
      - build-order-6
      - build-order-7
      - build-order-8
      - build-order-9
    if: |
      always() && !cancelled() &&
      (needs.parsec_intergration.result == 'success') && (needs.ouput_message.result != 'failure' ) &&
      (needs.build-order-0.result == 'success' || needs.build-order-0.result == 'skipped') &&
      (needs.build-order-1.result == 'success' || needs.build-order-1.result == 'skipped') &&
      (needs.build-order-2.result == 'success' || needs.build-order-2.result == 'skipped') &&
      (needs.build-order-3.result == 'success' || needs.build-order-3.result == 'skipped') &&
      (needs.build-order-4.result == 'success' || needs.build-order-4.result == 'skipped') &&
      (needs.build-order-5.result == 'success' || needs.build-order-5.result == 'skipped') &&
      (needs.build-order-6.result == 'success' || needs.build-order-6.result == 'skipped') &&
      (needs.build-order-7.result == 'success' || needs.build-order-7.result == 'skipped') &&
      (needs.build-order-8.result == 'success' || needs.build-order-8.result == 'skipped') &&
      (needs.build-order-9.result == 'success' || needs.build-order-9.result == 'skipped')
    uses: peeweep-test/Repository-Integration/.github/workflows/issue-project-manager.yml@master
    secrets: inherit
    with:
      repo: linuxdeepin/developer-center
      issueid:  ${{ needs.build_project_prepare.outputs.issueid }} #for test 3961
      project: 21 # https://github.com/orgs/linuxdeepin/projects/21/views/1
      assignees: "Zeno-sole, hudeng-go"
      title: "[Deepin Integration]~[${{ needs.parsec_intergration.outputs.milestone }}] ${{ needs.parsec_intergration.outputs.intergration_message }}"
      status: "In progress"
      milestone: ${{ needs.parsec_intergration.outputs.milestone }}
      labels: Project:integrated
      intergrationinfo: ${{ needs.parsec_intergration.outputs.intergrationinfo }}
      changelog: ${{ needs.parsec_intergration.outputs.changelog }}
      influence: ${{ needs.parsec_intergration.outputs.influence }}
      testrepoaddr: "    deb [trusted=yes] https://ci.deepin.com/repo/obs/deepin:/CI:/TestingIntegration:/test-integration-pr-${{ github.event.number }}/testing/ ./"

  # https://github.com/actions/runner/issues/491#issuecomment-850884422 reason why use this if
  # :( for this
  # this jobs used for merge topic into testing
  auto-test:
    name: auto test
    needs:
      - parsec_intergration
      - ouput_message
      - build_project_prepare
      - build-order-0
      - build-order-1
      - build-order-2
      - build-order-3
      - build-order-4
      - build-order-5
      - build-order-6
      - build-order-7
      - build-order-8
      - build-order-9
      - create_issue_link_project
    uses: peeweep-test/Repository-Integration/.github/workflows/04-auto-test.yml@master
    if: |
      always() && !cancelled() &&
      (needs.parsec_intergration.result == 'success') && (needs.ouput_message.result != 'failure' ) &&
      (needs.build-order-0.result == 'success' || needs.build-order-0.result == 'skipped') &&
      (needs.build-order-1.result == 'success' || needs.build-order-1.result == 'skipped') &&
      (needs.build-order-2.result == 'success' || needs.build-order-2.result == 'skipped') &&
      (needs.build-order-3.result == 'success' || needs.build-order-3.result == 'skipped') &&
      (needs.build-order-4.result == 'success' || needs.build-order-4.result == 'skipped') &&
      (needs.build-order-5.result == 'success' || needs.build-order-5.result == 'skipped') &&
      (needs.build-order-6.result == 'success' || needs.build-order-6.result == 'skipped') &&
      (needs.build-order-7.result == 'success' || needs.build-order-7.result == 'skipped') &&
      (needs.build-order-8.result == 'success' || needs.build-order-8.result == 'skipped') &&
      (needs.build-order-9.result == 'success' || needs.build-order-9.result == 'skipped')
    with:
      topic: test-integration-pr-${{ github.event.number }}
      packages: ${{ needs.parsec_intergration.outputs.all_build_task }}
      deploy: ${{ needs.parsec_intergration.outputs.deploy }}

  deploy-repo:
    name: merge topic repo
    needs:
      - parsec_intergration
      - ouput_message
      - build_project_prepare
      - build-order-0
      - build-order-1
      - build-order-2
      - build-order-3
      - build-order-4
      - build-order-5
      - build-order-6
      - build-order-7
      - build-order-8
      - build-order-9
      - auto-test
    uses: peeweep-test/Repository-Integration/.github/workflows/05-merge-into-testing.yml@master
    secrets: inherit
    if: |
      always() && !cancelled() &&
      (needs.parsec_intergration.result == 'success') && (needs.ouput_message.result != 'failure') &&
      (needs.build-order-0.result == 'success' || needs.build-order-0.result == 'skipped') &&
      (needs.build-order-1.result == 'success' || needs.build-order-1.result == 'skipped') &&
      (needs.build-order-2.result == 'success' || needs.build-order-2.result == 'skipped') &&
      (needs.build-order-3.result == 'success' || needs.build-order-3.result == 'skipped') &&
      (needs.build-order-4.result == 'success' || needs.build-order-4.result == 'skipped') &&
      (needs.build-order-5.result == 'success' || needs.build-order-5.result == 'skipped') &&
      (needs.build-order-6.result == 'success' || needs.build-order-6.result == 'skipped') &&
      (needs.build-order-7.result == 'success' || needs.build-order-7.result == 'skipped') &&
      (needs.build-order-8.result == 'success' || needs.build-order-8.result == 'skipped') &&
      (needs.build-order-9.result == 'success' || needs.build-order-9.result == 'skipped') &&
      (needs.auto-test.result == 'success')
    with:
      topic: test-integration-pr-${{ github.event.number }}
      deploy: "TestingRepoReviewer"
      component: ${{ needs.parsec_intergration.outputs.component }}
      message: ${{ needs.parsec_intergration.outputs.intergration_message }}

  # merge finished and success, closing this pr
  close-pull-request:
    name: close this pull request
    needs:
      - deploy-repo
      - parsec_intergration
    if: always() && !cancelled() && (needs.deploy-repo.result == 'success')
    uses: peeweep-test/Repository-Integration/.github/workflows/06-deployed.yml@master
    secrets: inherit
    with:
      integrations: ${{ needs.parsec_intergration.outputs.all_build_task }}

  # ten level build task
  build-order-0:
    name: build-order-0
    if: always() && !cancelled() && (needs.parsec_intergration.outputs.build_matrix_0 != '') && (needs.parsec_intergration.result == 'success')
    needs:
      - parsec_intergration
      - build_project_prepare
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.parsec_intergration.outputs.build_matrix_0) }}
    uses: peeweep-test/Repository-Integration/.github/workflows/02-build-obs.yml@master
    secrets: inherit
    with:
      repo: ${{ matrix.payload.repo }}
      tag: ${{ matrix.payload.tag }}
      tagsha: ${{ matrix.payload.tagsha }}
      topic: test-integration-pr-${{ github.event.number }}

  build-order-1:
    if: always() && !cancelled() && (needs.parsec_intergration.outputs.build_matrix_1 != '') && (needs.parsec_intergration.result == 'success')
    needs: 
      - parsec_intergration
      - build-order-0
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.parsec_intergration.outputs.build_matrix_1) }}
    uses: peeweep-test/Repository-Integration/.github/workflows/02-build-obs.yml@master
    secrets: inherit
    with:
      repo: ${{ matrix.payload.repo }}
      tag: ${{ matrix.payload.tag }}
      tagsha: ${{ matrix.payload.tagsha }}
      topic: test-integration-pr-${{ github.event.number }}

  build-order-2:
    if: always() && !cancelled() && ( needs.parsec_intergration.outputs.build_matrix_2 != '') && (needs.parsec_intergration.result == 'success')
    needs:
      - parsec_intergration
      - build-order-1
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.parsec_intergration.outputs.build_matrix_2) }}
    uses: peeweep-test/Repository-Integration/.github/workflows/02-build-obs.yml@master
    secrets: inherit
    with:
      repo: ${{ matrix.payload.repo }}
      tag: ${{ matrix.payload.tag }}
      tagsha: ${{ matrix.payload.tagsha }}
      topic: test-integration-pr-${{ github.event.number }}

  build-order-3:
    if: always() && !cancelled() && ( needs.parsec_intergration.outputs.build_matrix_3 != '') && (needs.parsec_intergration.result == 'success')
    needs: 
      - parsec_intergration
      - build-order-2
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.parsec_intergration.outputs.build_matrix_3) }}
    uses: peeweep-test/Repository-Integration/.github/workflows/02-build-obs.yml@master
    secrets: inherit
    with:
      repo: ${{ matrix.payload.repo }}
      tag: ${{ matrix.payload.tag }}
      tagsha: ${{ matrix.payload.tagsha }}
      topic: test-integration-pr-${{ github.event.number }}

  build-order-4:
    if: always() && !cancelled() && ( needs.parsec_intergration.outputs.build_matrix_4 != '') && (needs.parsec_intergration.result == 'success')
    needs: 
      - parsec_intergration
      - build-order-3
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.parsec_intergration.outputs.build_matrix_4) }}
    uses: peeweep-test/Repository-Integration/.github/workflows/02-build-obs.yml@master
    secrets: inherit
    with:
      repo: ${{ matrix.payload.repo }}
      tag: ${{ matrix.payload.tag }}
      tagsha: ${{ matrix.payload.tagsha }}
      topic: test-integration-pr-${{ github.event.number }}

  build-order-5:
    name: build-order-5
    if: always() && !cancelled() && ( needs.parsec_intergration.outputs.build_matrix_5 != '') && (needs.parsec_intergration.result == 'success')
    needs:
      - parsec_intergration
      - build-order-4
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.parsec_intergration.outputs.build_matrix_5) }}
    uses: peeweep-test/Repository-Integration/.github/workflows/02-build-obs.yml@master
    secrets: inherit
    with:
      repo: ${{ matrix.payload.repo }}
      tag: ${{ matrix.payload.tag }}
      tagsha: ${{ matrix.payload.tagsha }}
      topic: test-integration-pr-${{ github.event.number }}

  build-order-6:
    if: always() && !cancelled() && ( needs.parsec_intergration.outputs.build_matrix_6 != '') && (needs.parsec_intergration.result == 'success')
    needs:
      - parsec_intergration
      - build-order-5
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.parsec_intergration.outputs.build_matrix_6) }}
    uses: peeweep-test/Repository-Integration/.github/workflows/02-build-obs.yml@master
    secrets: inherit
    with:
      repo: ${{ matrix.payload.repo }}
      tag: ${{ matrix.payload.tag }}
      tagsha: ${{ matrix.payload.tagsha }}
      topic: test-integration-pr-${{ github.event.number }}

  build-order-7:
    if: always() && !cancelled() && ( needs.parsec_intergration.outputs.build_matrix_7 != '') && (needs.parsec_intergration.result == 'success')
    needs:
      - parsec_intergration
      - build-order-6
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.parsec_intergration.outputs.build_matrix_7) }}
    uses: peeweep-test/Repository-Integration/.github/workflows/02-build-obs.yml@master
    secrets: inherit
    with:
      repo: ${{ matrix.payload.repo }}
      tag: ${{ matrix.payload.tag }}
      tagsha: ${{ matrix.payload.tagsha }}
      topic: test-integration-pr-${{ github.event.number }}

  build-order-8:
    if: always() && !cancelled() && ( needs.parsec_intergration.outputs.build_matrix_8 != '') && (needs.parsec_intergration.result == 'success')
    needs: 
      - parsec_intergration
      - build-order-7
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.parsec_intergration.outputs.build_matrix_8) }}
    uses: peeweep-test/Repository-Integration/.github/workflows/02-build-obs.yml@master
    secrets: inherit
    with:
      repo: ${{ matrix.payload.repo }}
      tag: ${{ matrix.payload.tag }}
      tagsha: ${{ matrix.payload.tagsha }}
      topic: test-integration-pr-${{ github.event.number }}

  build-order-9:
    if: always() && !cancelled() && ( needs.parsec_intergration.outputs.build_matrix_9 != '') && (needs.parsec_intergration.result == 'success')
    needs: 
      - parsec_intergration
      - build-order-8
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.parsec_intergration.outputs.build_matrix_9) }}
    uses: peeweep-test/Repository-Integration/.github/workflows/02-build-obs.yml@master
    secrets: inherit
    with:
      repo: ${{ matrix.payload.repo }}
      tag: ${{ matrix.payload.tag }}
      tagsha: ${{ matrix.payload.tagsha }}
      topic: test-integration-pr-${{ github.event.number }}
